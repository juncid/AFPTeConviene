{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Field } from \"formik\";\nimport { Wizard, WizardStep } from \"./WizardComponent\";\nimport { Step1Schema, Step2Schema, Step3Schema } from \"../utils/validationSchemaWizard\";\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport MaskedInput from \"react-text-mask\";\nimport { celularMask, dineroMask, rutMask } from \"../utils/inputMask\";\nimport { cleanDigitos, cleanRut } from \"../utils/cleanInputMask\";\n\nconst APVForm = props => {\n  const aacento = \"\\u00e1\";\n  const eacento = \"\\u00e9\";\n  const iacento = \"\\u00ed\";\n  const oacento = \"\\u00f3\";\n  const uacento = \"\\u00fa\";\n  const enhe = '\\u00f1';\n  const interrogacion = '\\u00BF';\n  const router = useRouter();\n  const initialValues = {\n    nombre: '',\n    rut: '',\n    correo: '',\n    celular: '',\n    sueldo: '',\n    ahorro: '',\n    terminosycondiciones: false\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"wizardForm\",\n    children: /*#__PURE__*/_jsxs(Wizard, {\n      initialValues: initialValues,\n      onSubmit: values => {\n        const headers = {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${props.token}`\n        };\n        const url = `${props.urlPostSimulacion}`;\n        const body = {\n          nombre: values.nombre,\n          rut: cleanRut(values.rut),\n          correo: values.correo,\n          celular: cleanDigitos(values.celular),\n          sueldo: cleanDigitos(values.sueldo),\n          ahorro: cleanDigitos(values.ahorro)\n        };\n        axios.post(url, body, {\n          headers: headers\n        }).then(response => {\n          let data = response.data;\n\n          if (data.idSimulacion) {\n            router.push({\n              pathname: \"/resultado\",\n              query: {\n                id: data.idSimulacion\n              }\n            });\n          }\n        }).catch(e => {\n          console.log(e);\n        });\n      },\n      children: [/*#__PURE__*/_jsxs(WizardStep, {\n        onSubmit: () => console.log('Step1 onSubmit'),\n        validationSchema: Step1Schema,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-group input-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"nombre\",\n            className: \"control-label\",\n            children: \"Nombre\"\n          }), /*#__PURE__*/_jsx(Field, {\n            name: \"nombre\",\n            children: ({\n              field,\n              form: {\n                touched,\n                errors\n              }\n            }) => /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({}, field), {}, {\n                type: \"text\",\n                className: `form-control form-control-lg ${touched.nombre ? errors.nombre ? \"is-invalid\" : \"is-valid\" : \"\"}`,\n                id: \"nombre\",\n                \"aria-describedby\": \"nombreAyuda\",\n                placeholder: \"Nombre\"\n              })), /*#__PURE__*/_jsx(\"small\", {\n                id: \"nombreAyuda\",\n                className: `form-text ${touched.nombre && errors.nombre ? \"is-invalid\" : \"\"}`,\n                children: touched.nombre && errors.nombre ? errors.nombre : \"Indicanos tu nombre y apellido.\"\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-group input-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"rut\",\n            className: \"control-label\",\n            children: \"RUT\"\n          }), /*#__PURE__*/_jsx(Field, {\n            name: \"rut\",\n            children: ({\n              field,\n              form: {\n                touched,\n                errors\n              }\n            }) => /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(MaskedInput, _objectSpread(_objectSpread({}, field), {}, {\n                type: \"text\",\n                mask: rutMask,\n                className: `form-control form-control-lg ${touched.rut ? errors.rut ? \"is-invalid\" : \"is-valid\" : \"\"}`,\n                id: \"rut\",\n                \"aria-describedby\": \"rutAyuda\",\n                placeholder: \"RUT\"\n              })), /*#__PURE__*/_jsx(\"small\", {\n                id: \"rutAyuda\",\n                className: `form-text ${touched.rut && errors.rut ? \"is-invalid\" : \"\"}`,\n                children: touched.rut && errors.rut ? errors.rut : \"Ej. 12.345.678-9.\"\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-group input-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"correo\",\n            className: \"control-label\",\n            children: \"Correo\"\n          }), /*#__PURE__*/_jsx(Field, {\n            name: \"correo\",\n            children: ({\n              field,\n              form: {\n                touched,\n                errors\n              }\n            }) => /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({}, field), {}, {\n                type: \"email\",\n                className: `form-control form-control-lg ${touched.correo ? errors.correo ? 'is-invalid' : 'is-valid' : ''}`,\n                id: \"correo\",\n                \"aria-describedby\": \"correoAyuda\",\n                placeholder: \"Correo\"\n              })), /*#__PURE__*/_jsx(\"small\", {\n                id: \"correoAyuda\",\n                className: `form-text ${touched.correo && errors.correo & \"is-invalid\"}`,\n                children: touched.correo && errors.correo ? errors.correo : \"Ej. aumentatusueldo@afpmodelo.cl\"\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-group input-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"celular\",\n            className: \"control-label\",\n            children: \"Celular\"\n          }), /*#__PURE__*/_jsx(Field, {\n            name: \"celular\",\n            children: ({\n              field,\n              form: {\n                touched,\n                errors\n              }\n            }) => /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(MaskedInput, _objectSpread(_objectSpread({}, field), {}, {\n                type: \"text\",\n                mask: celularMask,\n                className: `form-control form-control-lg ${touched.celular ? errors.celular ? \"is-invalid\" : \"is-valid\" : \"\"}`,\n                id: \"celular\",\n                \"aria-describedby\": \"celularAyuda\",\n                placeholder: `9 ____ ____`\n              })), /*#__PURE__*/_jsx(\"small\", {\n                id: \"celularAyuda\",\n                className: `form-text ${touched.celular && errors.celular && \"is-invalid\"}`,\n                children: touched.celular && errors.celular ? errors.celular : \"Ej. 9 1112 23XX\"\n              })]\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(WizardStep, {\n        onSubmit: () => console.log('Step2 onSubmit'),\n        validationSchema: Step2Schema,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-group input-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"sueldo\",\n            className: \"control-label\",\n            children: \"sueldo\"\n          }), /*#__PURE__*/_jsx(Field, {\n            name: \"sueldo\",\n            children: ({\n              field,\n              form: {\n                touched,\n                errors\n              }\n            }) => /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(MaskedInput, _objectSpread(_objectSpread({}, field), {}, {\n                type: \"text\",\n                mask: dineroMask,\n                className: `form-control form-control-lg ${touched.sueldo ? errors.sueldo ? \"is-invalid\" : \"is-valid\" : \"\"}`,\n                id: \"sueldo\",\n                \"aria-describedby\": \"sueldoAyuda\",\n                placeholder: `Sueldo L${iacento}quido`\n              })), /*#__PURE__*/_jsx(\"small\", {\n                id: \"sueldoAyuda\",\n                className: `form-text \n                                                    ${touched.sueldo && errors.sueldo ? \"is-invalid\" : \"\"}`,\n                children: touched.sueldo && errors.sueldo ? errors.sueldo : `El sueldo l${iacento}quido que recibes luego de los descuentos legales.`\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-group input-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"ahorro\",\n            className: \"control-label\",\n            children: \"Monto Ahorro\"\n          }), /*#__PURE__*/_jsx(Field, {\n            name: \"ahorro\",\n            children: ({\n              field,\n              form: {\n                touched,\n                errors\n              }\n            }) => /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(MaskedInput, _objectSpread(_objectSpread({}, field), {}, {\n                type: \"text\",\n                mask: dineroMask,\n                className: `form-control form-control-lg ${touched.ahorro ? errors.ahorro ? \"is-invalid\" : \"is-valid\" : \"\"}`,\n                id: \"ahorro\",\n                \"aria-describedby\": \"ahorroAyuda\",\n                placeholder: \"Ahorro Mensual\"\n              })), /*#__PURE__*/_jsx(\"small\", {\n                id: \"ahorroAyuda\",\n                className: `form-text ${touched.ahorro && errors.ahorro ? \"is-invalid\" : \"\"}`,\n                children: touched.ahorro && errors.ahorro ? errors.ahorro : `El monto en pesos que invertir${iacento}as en tu APV.`\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-group input-wrapper select\",\n          children: [/*#__PURE__*/_jsxs(\"label\", {\n            htmlFor: \"afp\",\n            children: [\"Ind\\xEDcanos tu AFP actual:\", /*#__PURE__*/_jsxs(\"select\", {\n              className: \"form-control form-control-lg\",\n              id: \"afp\",\n              name: \"afp\",\n              onChange: handleChange,\n              value: form.afp,\n              children: [\" \", /*#__PURE__*/_jsx(\"option\", {\n                value: \"default\",\n                children: \"Seleccione una AFP\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"0\",\n                children: \"AFP Capital\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"1\",\n                children: \"AFP Cuprum\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"2\",\n                children: \"AFP Habitat\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"3\",\n                children: \"AFP Plan Vital\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"4\",\n                children: \"AFP Provida\"\n              }), /*#__PURE__*/_jsx(\"option\", {\n                value: \"6\",\n                children: \"AFP Uno\"\n              })]\n            })]\n          }), /*#__PURE__*/_jsx(\"small\", {\n            id: \"afpAyuda\",\n            className: `form-text ${errors.afp !== undefined && errors.afp !== \"\" ? \"is-invalid\" : \"\"}`,\n            children: errors.afp !== undefined && errors.afp !== \"\" ? errors.afp : \"\"\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(WizardStep, {\n        onSubmit: () => console.log('Step3 onSubmit'),\n        validationSchema: Step3Schema\n      })]\n    })\n  });\n};\n\nexport default APVForm;","map":{"version":3,"sources":["C:/Users/juanc/source/repos/AFPTeConviene/components/ApvForm.js"],"names":["React","useState","useEffect","Field","Wizard","WizardStep","Step1Schema","Step2Schema","Step3Schema","useRouter","axios","MaskedInput","celularMask","dineroMask","rutMask","cleanDigitos","cleanRut","APVForm","props","aacento","eacento","iacento","oacento","uacento","enhe","interrogacion","router","initialValues","nombre","rut","correo","celular","sueldo","ahorro","terminosycondiciones","values","headers","token","url","urlPostSimulacion","body","post","then","response","data","idSimulacion","push","pathname","query","id","catch","e","console","log","field","form","touched","errors","handleChange","afp","undefined"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Field } from \"formik\";\r\nimport { Wizard, WizardStep } from \"./WizardComponent\";\r\nimport { Step1Schema, Step2Schema, Step3Schema } from \"../utils/validationSchemaWizard\";\r\nimport { useRouter } from 'next/router';\r\nimport axios from 'axios';\r\nimport MaskedInput from \"react-text-mask\";\r\nimport { celularMask, dineroMask, rutMask } from \"../utils/inputMask\"\r\nimport { cleanDigitos, cleanRut } from \"../utils/cleanInputMask\"\r\n\r\nconst APVForm = (props) => {\r\n\r\n    const aacento = \"\\u00e1\";\r\n    const eacento = \"\\u00e9\";\r\n    const iacento = \"\\u00ed\";\r\n    const oacento = \"\\u00f3\";\r\n    const uacento = \"\\u00fa\";\r\n    const enhe = '\\u00f1';\r\n    const interrogacion = '\\u00BF';\r\n\r\n    const router = useRouter()\r\n\r\n    const initialValues = {\r\n        nombre: '',\r\n        rut: '',\r\n        correo: '',\r\n        celular: '',\r\n        sueldo: '',\r\n        ahorro: '',\r\n        terminosycondiciones: false,\r\n    };\r\n\r\n    return (\r\n        <div className='wizardForm'>\r\n            <Wizard\r\n                initialValues={initialValues}\r\n                onSubmit={values => {\r\n                    const headers = {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": `Bearer ${props.token}`\r\n                    };\r\n\r\n                    const url = `${props.urlPostSimulacion}`;\r\n\r\n                    const body = {\r\n                        nombre: values.nombre,\r\n                        rut: cleanRut(values.rut),\r\n                        correo: values.correo,\r\n                        celular: cleanDigitos(values.celular),\r\n                        sueldo: cleanDigitos(values.sueldo),\r\n                        ahorro: cleanDigitos(values.ahorro)\r\n                    };\r\n\r\n                    axios\r\n                        .post(url, body, { headers: headers })\r\n                        .then((response) => {\r\n                            let data = response.data;\r\n\r\n\r\n                            if (data.idSimulacion) {\r\n                                router.push({\r\n                                    pathname: \"/resultado\",\r\n                                    query: {\r\n                                        id: data.idSimulacion,\r\n                                    },\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch(e => {\r\n                            console.log(e);\r\n                        });\r\n\r\n                }}\r\n            >\r\n                <WizardStep\r\n                    onSubmit={() => console.log('Step1 onSubmit')}\r\n                    validationSchema={Step1Schema}\r\n                >\r\n                    <div className=\"form-group input-wrapper\">\r\n                        <label\r\n                            htmlFor=\"nombre\"\r\n                            className=\"control-label\"\r\n                        >\r\n                            Nombre\r\n                        </label>\r\n                        <Field name=\"nombre\">\r\n                            {({\r\n                                  field,\r\n                                  form: { touched, errors },\r\n                              }) => (\r\n                                <>\r\n                                    <input\r\n                                        {...field}\r\n                                        type=\"text\"\r\n                                        className={`form-control form-control-lg ${touched.nombre ? (errors.nombre ? \"is-invalid\" : \"is-valid\") : \"\"}`}\r\n                                        id=\"nombre\"\r\n                                        aria-describedby=\"nombreAyuda\"\r\n                                        placeholder=\"Nombre\"\r\n                                    />\r\n                                    <small\r\n                                        id=\"nombreAyuda\"\r\n                                        className={`form-text ${touched.nombre && errors.nombre ? \"is-invalid\" : \"\"\r\n                                        }`}\r\n                                    >\r\n                                        {touched.nombre && errors.nombre\r\n                                            ? errors.nombre\r\n                                            : \"Indicanos tu nombre y apellido.\"}\r\n                                    </small>\r\n                                </>\r\n                            )}\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group input-wrapper\">\r\n                        <label\r\n                            htmlFor=\"rut\"\r\n                            className=\"control-label\"\r\n                        >\r\n                            RUT\r\n                        </label>\r\n                        <Field name=\"rut\">\r\n                            {({\r\n                                  field,\r\n                                  form: { touched, errors },\r\n                              }) => (\r\n                                <>\r\n                                    <MaskedInput\r\n                                        {...field}\r\n                                        type=\"text\"\r\n                                        mask={rutMask}\r\n                                        className={`form-control form-control-lg ${touched.rut ? (errors.rut ? \"is-invalid\" : \"is-valid\") : \"\"}`}\r\n                                        id=\"rut\"\r\n                                        aria-describedby=\"rutAyuda\"\r\n                                        placeholder=\"RUT\"\r\n                                    />\r\n                                    <small\r\n                                        id=\"rutAyuda\"\r\n                                        className={`form-text ${touched.rut && errors.rut ? \"is-invalid\" : \"\"}`}\r\n                                    >\r\n                                        {touched.rut && errors.rut\r\n                                            ? errors.rut\r\n                                            : \"Ej. 12.345.678-9.\"}\r\n                                    </small>\r\n                                </>\r\n                            )}\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group input-wrapper\">\r\n                        <label\r\n                            htmlFor=\"correo\"\r\n                            className=\"control-label\"\r\n                        >\r\n                            Correo\r\n                        </label>\r\n                        <Field name=\"correo\">\r\n                            {({\r\n                                  field,\r\n                                  form: { touched, errors },\r\n                              }) => (\r\n                                <>\r\n                                    <input\r\n                                        {...field}\r\n                                        type=\"email\"\r\n                                        className={`form-control form-control-lg ${touched.correo ? (errors.correo ? 'is-invalid' : 'is-valid') : ''\r\n                                        }`}\r\n                                        id=\"correo\"\r\n                                        aria-describedby=\"correoAyuda\"\r\n                                        placeholder=\"Correo\"\r\n                                    />\r\n                                    <small\r\n                                        id=\"correoAyuda\"\r\n                                        className={`form-text ${touched.correo && errors.correo & \"is-invalid\"}`}\r\n                                    >\r\n                                        {touched.correo && errors.correo\r\n                                            ? errors.correo\r\n                                            : \"Ej. aumentatusueldo@afpmodelo.cl\"}\r\n                                    </small>\r\n                                </>\r\n                            )}\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group input-wrapper\">\r\n                        <label\r\n                            htmlFor=\"celular\"\r\n                            className=\"control-label\"\r\n                        >\r\n                            Celular\r\n                        </label>\r\n                        <Field name=\"celular\">\r\n                            {({\r\n                                  field,\r\n                                  form: { touched, errors },\r\n                              }) => (\r\n                                <>\r\n                                    <MaskedInput\r\n                                        {...field}\r\n                                        type=\"text\"\r\n                                        mask={celularMask}\r\n                                        className={`form-control form-control-lg ${touched.celular ? (errors.celular ? \"is-invalid\" : \"is-valid\") : \"\"}`}\r\n                                        id=\"celular\"\r\n                                        aria-describedby=\"celularAyuda\"\r\n                                        placeholder={`9 ____ ____`}\r\n                                    />\r\n\r\n                                    <small\r\n                                        id=\"celularAyuda\"\r\n                                        className={`form-text ${touched.celular && errors.celular && \"is-invalid\"}`}\r\n                                    >\r\n                                        {touched.celular && errors.celular ? errors.celular : \"Ej. 9 1112 23XX\"}\r\n                                    </small>\r\n                                </>\r\n                            )}\r\n                        </Field>\r\n                    </div>\r\n\r\n\r\n                </WizardStep>\r\n                <WizardStep\r\n                    onSubmit={() => console.log('Step2 onSubmit')}\r\n                    validationSchema={Step2Schema}\r\n                >\r\n                    <div className=\"form-group input-wrapper\">\r\n                        <label\r\n                            htmlFor=\"sueldo\"\r\n                            className={\"control-label\"}>sueldo\r\n                        </label>\r\n                        <Field name=\"sueldo\"\r\n                        >\r\n                            {({\r\n                                  field,\r\n                                  form: { touched, errors },\r\n                              }) => (\r\n                                <>\r\n                                    <MaskedInput\r\n                                        {...field}\r\n                                        type=\"text\"\r\n                                        mask={dineroMask}\r\n                                        className={`form-control form-control-lg ${touched.sueldo ? (errors.sueldo ? \"is-invalid\" : \"is-valid\") : \"\"}`}\r\n                                        id=\"sueldo\"\r\n                                        aria-describedby=\"sueldoAyuda\"\r\n                                        placeholder={`Sueldo L${iacento}quido`}\r\n                                    />\r\n                                    <small\r\n                                        id=\"sueldoAyuda\"\r\n                                        className={`form-text \r\n                                                    ${touched.sueldo && errors.sueldo ? \"is-invalid\" : \"\"}`}\r\n                                    >\r\n                                        {touched.sueldo && errors.sueldo\r\n                                            ? errors.sueldo\r\n                                            : `El sueldo l${iacento}quido que recibes luego de los descuentos legales.`}\r\n                                    </small>\r\n                                </>\r\n                            )}\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group input-wrapper\">\r\n                        <label\r\n                            htmlFor=\"ahorro\"\r\n                            className=\"control-label\"\r\n                        >\r\n                            Monto Ahorro\r\n                        </label>\r\n                        <Field name=\"ahorro\">\r\n                            {({\r\n                                  field,\r\n                                  form: { touched, errors },\r\n                              }) => (\r\n                                <>\r\n                                    <MaskedInput\r\n                                        {...field}\r\n                                        type=\"text\"\r\n                                        mask={dineroMask}\r\n                                        className={`form-control form-control-lg ${touched.ahorro ? (errors.ahorro ? \"is-invalid\" : \"is-valid\") : \"\"}`}\r\n                                        id=\"ahorro\"\r\n                                        aria-describedby=\"ahorroAyuda\"\r\n                                        placeholder=\"Ahorro Mensual\"\r\n                                    />\r\n                                    <small\r\n                                        id=\"ahorroAyuda\"\r\n                                        className={`form-text ${touched.ahorro && errors.ahorro ? \"is-invalid\" : \"\"}`}\r\n                                    >\r\n                                        {touched.ahorro && errors.ahorro\r\n                                            ? errors.ahorro\r\n                                            : `El monto en pesos que invertir${iacento}as en tu APV.`}\r\n                                    </small>\r\n                                </>\r\n                            )}\r\n                        </Field>\r\n                    </div>\r\n\r\n                    <div className=\"form-group input-wrapper select\">\r\n                        <label htmlFor=\"afp\">\r\n                            Indícanos tu AFP actual:\r\n                            <select\r\n                                className=\"form-control form-control-lg\"\r\n                                id=\"afp\"\r\n                                name=\"afp\"\r\n                                onChange={handleChange}\r\n                                value={form.afp}\r\n                            >\r\n                                {\" \"}\r\n                                {/* eslint-disable-line */}\r\n                                <option value=\"default\">\r\n                                    Seleccione una AFP\r\n                                </option>\r\n                                <option value=\"0\">AFP Capital</option>\r\n                                <option value=\"1\">AFP Cuprum</option>\r\n                                <option value=\"2\">AFP Habitat</option>\r\n                                <option value=\"3\">AFP Plan Vital</option>\r\n                                <option value=\"4\">AFP Provida</option>\r\n                                <option value=\"6\">AFP Uno</option>\r\n                            </select>\r\n                        </label>\r\n                        <small\r\n                            id=\"afpAyuda\"\r\n                            className={`form-text ${\r\n                                errors.afp !== undefined && errors.afp !== \"\"\r\n                                    ? \"is-invalid\"\r\n                                    : \"\"\r\n                            }`}\r\n                        >\r\n                            {errors.afp !== undefined && errors.afp !== \"\"\r\n                                ? errors.afp\r\n                                : \"\"}\r\n                        </small>\r\n                    </div>\r\n                </WizardStep>\r\n                <WizardStep\r\n                    onSubmit={() => console.log('Step3 onSubmit')}\r\n                    validationSchema={Step3Schema}\r\n                >\r\n\r\n\r\n                </WizardStep>\r\n            </Wizard>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default APVForm;"]},"metadata":{},"sourceType":"module"}